#!/bin/bash

# Universal DB quick actions for Postgres via backend /api/db/* endpoints
# These helpers generate SQL and pipe it to ./scripts/sql.sh for execution.
#
# Usage examples:
#   ./scripts/db-actions.sh user add --username alice --email alice@example.com --password password123 --first "Alice" --last "Doe"
#   ./scripts/db-actions.sh user rename --old alice --new alice2
#   ./scripts/db-actions.sh startup add --name "Acme AI" --tagline "AI copilot" --website https://acme.ai --stage growth --industry AI --location Berlin
#   ./scripts/db-actions.sh run "SELECT COUNT(*) FROM users"

set -euo pipefail

ACTION=${1:-}
ENTITY=${2:-}
shift 2 || true

fail() { echo "$*" >&2; exit 1; }

run_sql() {
  local TYPE=${1:-auto}
  local SQL=${2:-}
  if [ -z "$SQL" ]; then fail "No SQL provided"; fi
  ./scripts/sql.sh -t "$TYPE" "$SQL"
}

parse_args() {
  # Simple flag parser: --key value â†’ sets KEY variable
  while [ $# -gt 0 ]; do
    case "$1" in
      --*)
        key=${1#--}
        val=${2:-}
        [ -z "$val" ] && fail "Missing value for $1"
        export ${key^^}="$val"
        shift 2
        ;;
      *)
        ARGS+="$1 "
        shift
        ;;
    esac
  done
}

case "$ACTION" in
  user)
    SUB=${ENTITY:-}; shift 0 || true
    case "$SUB" in
      add)
        parse_args "$@"
        [ -z "${USERNAME:-}" ] && fail "--username required"
        [ -z "${EMAIL:-}" ] && fail "--email required"
        [ -z "${PASSWORD:-}" ] && fail "--password required"
        FIRST_NAME=${FIRST:-User}
        LAST_NAME=${LAST:-New}
        SQL="INSERT INTO users (username, email, password, first_name, last_name, role, enabled, created_at, updated_at) VALUES ('${USERNAME}','${EMAIL}','${PASSWORD}','${FIRST_NAME}','${LAST_NAME}','USER', true, NOW(), NOW());"
        run_sql dml "$SQL"
        ;;
      rename)
        parse_args "$@"
        [ -z "${OLD:-}" ] && fail "--old required"
        [ -z "${NEW:-}" ] && fail "--new required"
        SQL="UPDATE users SET username='${NEW}' WHERE username='${OLD}';"
        run_sql dml "$SQL"
        ;;
      delete)
        parse_args "$@"
        [ -z "${USERNAME:-}" ] && fail "--username required"
        SQL="DELETE FROM users WHERE username='${USERNAME}';"
        run_sql dml "$SQL"
        ;;
      *) fail "user subcommand: add|rename|delete" ;;
    esac
    ;;
  profile)
    SUB=${ENTITY:-}; shift 0 || true
    case "$SUB" in
      add)
        parse_args "$@"
        [ -z "${USER_ID:-}" ] && fail "--user-id required"
        NAME=${NAME:-"Demo User"}
        SQL="INSERT INTO user_profiles (user_id, name, created_at, updated_at) VALUES (${USER_ID}, '${NAME}', NOW(), NOW());"
        run_sql dml "$SQL"
        ;;
      update)
        parse_args "$@"
        [ -z "${PROFILE_ID:-}" ] && fail "--profile-id required"
        [ -z "${NAME:-}" ] && fail "--name required"
        SQL="UPDATE user_profiles SET name='${NAME}', updated_at=NOW() WHERE id=${PROFILE_ID};"
        run_sql dml "$SQL"
        ;;
      *) fail "profile subcommand: add|update" ;;
    esac
    ;;
  startup)
    SUB=${ENTITY:-}; shift 0 || true
    case "$SUB" in
      add)
        parse_args "$@"
        NAME=${NAME:-"Example Startup"}
        TAGLINE=${TAGLINE:-"Building the future"}
        WEBSITE=${WEBSITE:-"https://example.com"}
        STAGE=${STAGE:-"mvp"}
        INDUSTRY=${INDUSTRY:-"Software"}
        LOCATION=${LOCATION:-"Remote"}
        SQL="INSERT INTO startups (name, tagline, description, website, founded_date, stage, industry, team_size, location, is_hiring, is_fundraising, funding_amount, revenue_range, product_status, created_at, updated_at) VALUES ('${NAME}','${TAGLINE}','Autogenerated demo record','${WEBSITE}', CURRENT_DATE, '${STAGE}', '${INDUSTRY}', 3, '${LOCATION}', false, false, 0, '0-10k', 'launched', NOW(), NOW());"
        run_sql dml "$SQL"
        ;;
      *) fail "startup subcommand: add" ;;
    esac
    ;;
  table)
    SUB=${ENTITY:-}; shift 0 || true
    case "$SUB" in
      add-column)
        parse_args "$@"
        [ -z "${TABLE:-}" ] && fail "--table required"
        [ -z "${COLUMN:-}" ] && fail "--column required"
        [ -z "${TYPE:-}" ] && fail "--type required (e.g., text, integer)"
        SQL="ALTER TABLE ${TABLE} ADD COLUMN ${COLUMN} ${TYPE};"
        run_sql ddl "$SQL"
        ;;
      drop)
        parse_args "$@"
        [ -z "${TABLE:-}" ] && fail "--table required"
        SQL="DROP TABLE IF EXISTS ${TABLE} CASCADE;"
        run_sql ddl "$SQL"
        ;;
      *) fail "table subcommand: add-column|drop" ;;
    esac
    ;;
  run)
    SQL="$*"
    run_sql auto "$SQL"
    ;;
  *)
    cat <<HELP
DB Quick Actions:
  ./scripts/db-actions.sh user add --username USER --email MAIL --password PASS [--first F --last L]
  ./scripts/db-actions.sh user rename --old OLD --new NEW
  ./scripts/db-actions.sh user delete --username USER

  ./scripts/db-actions.sh profile add --user-id ID [--name NAME]
  ./scripts/db-actions.sh profile update --profile-id ID --name NAME

  ./scripts/db-actions.sh startup add --name N --tagline T --website W --stage S --industry I --location L

  ./scripts/db-actions.sh table add-column --table T --column C --type TYPE
  ./scripts/db-actions.sh table drop --table T

  ./scripts/db-actions.sh run "SELECT * FROM users LIMIT 3"
HELP
    exit 1
    ;;
esac


