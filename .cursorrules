# Repository Rules — Next.js + Spring Boot Monorepo

These rules are high‑level, always‑true guardrails for this repository. They reflect how the project is actually structured and run today.

## Organization
- Keep the root clean: only `README.md`, `.cursorrules`, `docker-compose.yml`, `scripts/`, `backend/`, `frontend/`, `ai/`, and `archive/` belong at the top level.
- Documentation lives in `ai/`. The single exception is the root `README.md`. Module‑level `README.md` files in `backend/` or `frontend/` are allowed.
- Remove unused files and code when refactoring. Update all references when renaming paths or URLs.

## Development Workflow
- Use the provided scripts:
  - `./scripts/dev.sh` to run the full dev stack (backend, frontend, optional MailDev).
  - `./scripts/status.sh` to check what’s running.
  - `./scripts/build.sh` and `./scripts/deploy.sh` for production builds.
- After file renames that affect built assets, perform a clean build using the scripts to prevent stale artifacts in `backend/src/main/resources/static/`.
- Follow the versions and setup documented in the root `README.md` (Java 21 via jenv, Node.js, Maven) rather than hard‑coding version rules here.

## Infrastructure (Local)
- Databases and tools run via `docker-compose.yml`:
  - Postgres on `5432`, Adminer on `8081`, MailDev SMTP on `1025`, MailDev Web on `1080`.
  - Use `docker compose up -d` to start/stop these services.
- When not using Docker for MailDev, `./scripts/dev.sh` can start a local MailDev instance automatically.

## UI/Design System
- Use the existing shadcn/ui components in `frontend/src/components/ui/` and maintain visual consistency.
- Reference archived templates in `archive/template-front-dashboard/` and `archive/template-front-multipurpose/` for patterns and inspiration, but do not mix their build systems/assets directly into the app. Curate any copied assets and follow our current styling and tooling.

## Code Quality & Performance
- Write semantic HTML and ensure proper meta/viewport tags. Verify responsive behavior.
- Keep TypeScript strict and lint clean in `frontend/`. Follow Spring Boot conventions and avoid dead code in `backend/`.
- Use optimized, production‑ready assets for builds. Ensure the production build completes without warnings or errors.

## Testing & Verification
- Test core user flows in an actual browser before declaring readiness. Verify navigation works, pages load without console errors, and assets are accessible.
- For backend, verify health at `http://localhost:8080/health`. For frontend, verify `http://localhost:3000/` and dashboard routes. Confirm MailDev UI at `http://localhost:1080/` when applicable.

## Change Management
1. Understand current state and plan the change.
2. Implement with clean structure and consistent naming.
3. Rebuild and test locally (frontend + backend) using the scripts.
4. Clean up old files/refs. Update documentation in `ai/` and root `README.md` if behavior changes.
5. Ensure no console errors, and that asset paths and links are correct.

## Success Criteria
- Root is clean; docs organized in `ai/`; only `README.md` remains in root.
- No unused files or code. Asset paths are valid and accessible.
- Builds succeed; no runtime console errors; responsive behavior verified.
- UI aligns with shadcn/ui patterns and project styling. Archived templates are used only as references.