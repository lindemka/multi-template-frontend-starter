# Spring Boot Application Configuration
spring:
  application:
    name: project1
    
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:development}
    
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:project1}
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: ${DB_POOL_SIZE:10}
      minimum-idle: ${DB_MIN_IDLE:5}
      connection-timeout: ${DB_CONNECTION_TIMEOUT:20000}
      idle-timeout: ${DB_IDLE_TIMEOUT:300000}
      max-lifetime: ${DB_MAX_LIFETIME:1200000}
      auto-commit: false
      
  jpa:
    hibernate:
      ddl-auto: ${JPA_DDL_AUTO:validate}
  flyway:
    baseline-on-migrate: ${FLYWAY_BASELINE_ON_MIGRATE:true}
    show-sql: ${JPA_SHOW_SQL:false}
    open-in-view: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        jdbc:
          batch_size: 20
          batch_versioned_data: true
        order_inserts: true
        order_updates: true
        
  cache:
    type: ${CACHE_TYPE:simple}
    cache-names:
      - members
      - memberDetails
      - filters
    caffeine:
      spec: maximumSize=500,expireAfterWrite=60s
      
  security:
    jwt:
      # Access ~15min, Refresh ~30d by default
      secret: ${JWT_SECRET:ThisIsATemporarySecretKeyForDevelopmentOnlyChangeThisInProduction123456789}
      expiration: ${JWT_EXPIRATION:900000}
      refresh-secret: ${JWT_REFRESH_SECRET:AnotherTemporarySecretKeyForRefreshTokensChangeThisInProduction123456789}
      refresh-expiration: ${JWT_REFRESH_EXPIRATION:2592000000}

  mail:
    host: ${MAIL_HOST:localhost}
    port: ${MAIL_PORT:1025}
    username: ${MAIL_USERNAME:}
    password: ${MAIL_PASSWORD:}
    properties:
      mail:
        smtp:
          auth: ${MAIL_SMTP_AUTH:false}
          starttls:
            enable: ${MAIL_STARTTLS:false}
    test-connection: false
      
server:
  port: ${SERVER_PORT:8080}
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
    min-response-size: 1024
    
logging:
  level:
    root: ${LOG_LEVEL:INFO}
    com.example.demo: ${APP_LOG_LEVEL:DEBUG}
    org.springframework.web: ${WEB_LOG_LEVEL:INFO}
    org.hibernate.SQL: ${SQL_LOG_LEVEL:WARN}
  file:
    name: ${LOG_FILE:logs/application.log}

websocket:
  allowed-origins: ${WS_ALLOWED_ORIGINS:http://localhost:3000}
    
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  metrics:
    export:
      prometheus:
        enabled: true
        
cors:
  allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000}
  allowed-methods: ${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS}
  allowed-headers: ${CORS_ALLOWED_HEADERS:*}
  allow-credentials: true
  max-age: 3600

app:
  origin: ${APP_ORIGIN:http://localhost:3000}
  auth:
    requireEmailVerification: ${REQUIRE_EMAIL_VERIFICATION:true}
  mail:
    from: ${MAIL_FROM:no-reply@project1.local}

---
# Development Profile
spring:
  config:
    activate:
      on-profile: development
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
  flyway:
    baseline-on-migrate: true
    validate-on-migrate: false
app:
  auth:
    requireEmailVerification: false
      
---
# Production Profile  
spring:
  config:
    activate:
      on-profile: production
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
  cache:
    type: redis
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}